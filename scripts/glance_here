#!/bin/bash

###############################################################################
#                                                                             #
#  Script to run on a local computer to start Glances on Minerva and connect  #
#  to it with a local browser                                                 #
#                                                                             #
#  Main author     : Brian Fulton-Howard                                      #
#  Original author : Samuel Fux                                               #
#  Contributions   : Wei Guo, Gene Fluder, Lili Gai                           #
#                  : Andreas Lugmayr, Mike Boss                               #
#  Date            : October 2021                                             #
#  Location        : Mount Sinai (originally ETH Zurich)                      #
#  Version         : 0.7.1                                                    #
#  Change history  :                                                          #
#                                                                             #
#  17.11.2022    Create remote dir, include session name in lsf lognames      #
#  17.11.2022    Move remote files                                            #
#  07.11.2022    Allow long jobs                                              #
#  03.10.2022    Native client compatibility with Apple Silicon               #
#  29.09.2022    Further refinements from rstudio;                            #
#                allow differnt hostnames on different clients                #
#  07.09.2022    Refinements from rstudio integration                         #
#  07.09.2022    Allow resource specification,                                #
#                generalize for integration of rstudio,                       #
#                automatically use first project unless specified,            #
#                and colorize outputs                                         #
#  07.07.2022    Fix launching outside of home directory and                  #
#                more robust token grabbing                                   #
#  07.07.2022    Fix browser opening on Mac and support WSL                   #
#  04.07.2022    Locks have potential fix but are disabled for now            #
#  30.06.2022    Locks and free ports on remote, improved native              #
#                remote storage of reconnect info, improved messages          #
#  22.06.2022    Allow simultaneous sessions and specifying folder            #
#  22.06.2022    Automatic multiplexing and check for code-server             #
#  22.06.2022    Allow and validate longer walltimes                          #
#  16.06.2022    Adapt for minerva and add autorestart support                #
#  19.05.2022    JOBID is now saved to reconnect_info file                    #
#  28.10.2021    Initial version of the script based on Jupyter script        #
#                                                                             #
###############################################################################

###############################################################################
# Configuration options, initalising variables and setting default values     #
###############################################################################

# Version
S_VERSION="0.7.1"

# Runtime limit default         : 12:00 hour
S_RUN_TIME="12:00"

# Node to monitor
S_NODE="$(hostname -s)"

# Job ID to monitor
S_JOBID="none"

# True/False to kill the job
S_KILL="false"

# order for initializing configuration options
# 1. Defaults values set inside this script
# 2. Command line options overwrite defaults
# 3. Config file options  overwrite command line options

###############################################################################
# Text coloring                                                               #
###############################################################################

echoinfo () {
  echo -e "\033[32m[INFO] $@\033[0m"
}

echoerror () {
  echo -e "\033[31m[ERROR] $@\033[0m"
}

echoalert () {
  echo -e "\033[34;5m[INFO] $@\033[0m"
}

echowarn () {
  echo -e "\033[34;5m[WARNING] $@\033[0m"
}

###############################################################################
# Usage instructions                                                          #
###############################################################################

function display_help {
cat <<-EOF
$0: Script to start a Glances server on Minerva from a local computer

Usage: $(basename "$0") [options]

Optional arguments:

  -N | --node       login node       Node name or IP to monitor. Cannot use with
                                      -J/--job
  -J | --job        none             Job name or ID to monitor. Cannot use with
                                      -N/--node
  -K | --kill                        Kill the job and exit.
  -W | --runtime    12               Run time limit for the server in hours
                                      and minutes H[H[H]]:MM
  -c | --config     ~/.glnc_config    Configuration file for specifying options
  -h | --help                        Display help for this script and quit
  -v | --version                     Display version of the script and exit

Examples:

  $(basename $0) -N lc04a30

  $(basename $0) --runtime 01:30

  $(basename $0) -c $HOME/.glances_config -N lc04a30

Format of configuration file:

S_NODE="login"            # Node name or IP to monitor
S_RUN_TIME="01:00"        # Run time limit for the server in hours and
                            #   minutes H[H[H]]:MM
EOF
exit 1
}

###############################################################################
# Parse configuration options                                                 #
###############################################################################

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
    display_help
    ;;
    -v|--version)
    echo -e "glance_minerva version: $S_VERSION\n"
    exit
    ;;
    -N|--node)
    S_NODE=$2
    shift; shift
    ;;
    -J|--job)
    S_JOBID=$2
    if [[ ! $S_NODE == "login" ]]; then
      echoerror "Cannot specify both node and job"
      exit 1
    fi
    shift; shift
    ;;
    -K|--kill)
    S_KILL="true"
    shift
    ;;
    -W|--runtime)
    S_RUN_TIME=$2
    shift; shift
    ;;
    -c|--config)
    S_CONFIG_FILE=$2
    shift; shift
    ;;
    *)
    echowarn "ignoring unknown option $1 \n"
    shift
    ;;
  esac
done

###############################################################################
# Check key configuration options                                             #
###############################################################################

# check if user has a configuration file and source it to initialize options
if [ -f "$S_CONFIG_FILE" ]; then
  echoinfo "Found configuration file $S_CONFIG_FILE"
  echoinfo "Initializing configuration from file ${S_CONFIG_FILE}:"
  cat "$S_CONFIG_FILE"
  source "$S_CONFIG_FILE"
fi

if [[ $S_JOBID != "none" ]]; then
  # Check if jobid is numeric
  if [[ $S_JOBID =~ ^[0-9]+$ ]]; then
    S_JOBQUERY=$(bjobs -o first_host -noheader $S_JOBID)
    jobnotfound="Job <$S_JOBID> is not found"
    if [[ $S_JOBQUERY == $jobnotfound ]]; then
      echoerror "Job $S_JOBID not found on $S_HOSTNAME\n"
      exit 1
    else
      S_NODE=$S_JOBQUERY
      echoinfo "Found job $S_JOBID on node $S_NODE\n"
    fi
  else
    # Assume jobid is a jobname
    S_JOBNAME=$S_JOBID
    echoinfo "Detected jobname \"$S_JOBID\", searching for jobid"
    S_JOBQUERY=$(bjobs -o 'id name first_host')
    jobhits=$(echo "$S_JOBQUERY" | awk -v a="$S_JOBID" 'NR == 1 || $2 == a {print $1}')
    if [ $(echo "$jobhits" | wc -l) -eq 1 ]; then
      echoerror "No jobs called \"$S_JOBNAME\" found on $S_HOSTNAME\n"
      exit 1
    elif [ $(echo "$jobhits" | wc -l) -gt 2 ]; then
      echoerror "Multiple jobs found on $S_HOSTNAME\n"
      echoerror "$S_JOBQUERY\n"
      exit 1
    else
      S_JOBID=$(echo "$jobhits" | tail -n 1)
      S_NODE=$(echo "$S_JOBQUERY" | awk -v a="$S_JOBID" '$1 == a {print $3}')
      echoinfo "Found job $S_JOBID on node $S_NODE matching the name \"$S_JOBNAME\"\n"
    fi
  fi
fi

if [[ $S_KILL == true ]]; then
  ssh $S_NODE bash <<ENDSSH
    gprocs () {
      ps -o "pid,cmd" -u "\$USER" | \
        sed -r 's/^\s+//;s/ /\t/' | \
        awk 'BEGIN {FS="\t"} \$2 ~ /glances/ && \$2 !~ /awk/ {print \$1}'
    }
    procs=\$(gprocs)
    #check if procs is empty
    if [ -z "\$procs" ]; then
      echo "glances not running"
    else
      echo "killing glances"
      echo "\$procs" | xargs kill
    fi
ENDSSH
  exit 0
fi

###############################################################################
# Set up directories and files                                                #
###############################################################################

echoinfo "Getting username and shell"
S_USERINFO=$(getent passwd $USER)
REMOTE_SHELL=$(grep -Eo '[^/]+$' <<< $S_USERINFO)
S_USERNAME=$(grep -Eo '^[^:]+' <<< $S_USERINFO)

GLANCES_WORKDIR="/hpc/users/$S_USERNAME/minerva_jobs/glances"
S_BASE_RECONNECT=".reconnect_info_glances$S_NODE"
S_FILE_RECONNECT="$GLANCES_WORKDIR/$S_BASE_RECONNECT"
S_FILE_JOB="$GLANCES_WORKDIR/.glances$S_NODE.sh"
S_FILE_IP="$GLANCES_WORKDIR/glancesip$S_NODE"

###############################################################################
# Check directories and files                                                 #
###############################################################################

echoinfo "Checking directories"

info_workdir=$(echoinfo "Creating working directory")
# check workdir
if [[ ! -d $GLANCES_WORKDIR ]]; then
  mkdir -p $GLANCES_WORKDIR
  echo $info_workdir
fi

###############################################################################
# Check for leftover files                                                    #
###############################################################################

# check for reconnect_info in the current directory on the local computer

echoinfo "Checking if glances is already running"

S_RCI=$S_FILE_RECONNECT
if [ -f $S_RCI ]; then
  RC_PRT_REMOTE=$(sed -nE 's/^Remote port +: (.+)/\1/p' $S_RCI)
  RC_NODE_REMOTE=$(sed -nE 's/^Remote hostname +: (.+)/\1/p' $S_RCI)
  if curl -s $RC_NODE_REMOTE:$RC_PRT_REMOTE | grep -q glances.js; then
    sed 1d $S_RCI
    RC_URL=$(sed -nE 's/^URL[a-zA-Z ]+: (.+)/\1/p' $S_RCI)
    RC_PRT=$(sed -nE 's/^Local[a-zA-Z ]+: (.+)/\1/p' $S_RCI)
    RC_SSH="ssh $S_HOSTNAME -L $RC_PRT:$RC_NODE_REMOTE:$RC_PRT_REMOTE -fNT"

    echoinfo "Please run `glance_minerva $RC_NODE_REMOTE` on your local computer"
    fi
    exit 0
  else
    echowarn "Job expired; checking for left over files from previous sessions"
    echoinfo "Found local session file, deleting it ..."
    rm $S_RCI
  fi
else
  echoinfo "Checking for left over files from previous sessions"
fi

# check for log files from a previous session in the home directory of the cluster
info_sessionfile=$(echoinfo "Found old remote session file, deleting it ...")
info_ipfile=$(echoinfo "Found old IP file, deleting it ...")
info_jobfile=$(echoinfo "Found old job file, deleting it ...")

if [[ -f $S_FILE_RECONNECT ]]; then
  echo $info_sessionfile
  rm $S_FILE_RECONNECT
fi

if [[ -f $S_FILE_IP ]]; then
  echo $info_ipfile
  rm $S_FILE_IP
fi

if [[ -f $S_FILE_JOB ]]; then
  echo $info_jobfile
  rm $S_FILE_JOB
fi

echoinfo "Checking for glances\n"

if ! ssh bash -lc "which glances" &> /dev/null; then
  echoerror "glances must be available in bash on Minerva.\n"
  echoerror "We suggest running 'mamba install -c conda-forge glances bottle' on"
  echoerror "Minerva if you use Anaconda and Mamba."
  exit 1
fi

###############################################################################
# Check configuration options                                                 #
###############################################################################

echoinfo "Validating command line options\n"

# check if S_RUN_TIME is provided in HH:MM format
if [[ "$S_RUN_TIME" =~ ^([0-9]{1,3}):([0-9]{2})$ ]]; then
  S_HOURS=${BASH_REMATCH[1]}
  S_MIN=$(echo ${BASH_REMATCH[2]} | sed 's/^0\(.\)$/\1/')
  S_MIN_TOT=$(($S_MIN + 60 * $S_HOURS))
  if [[ ( $S_MIN_TOT -gt 8640 && $S_QUEUE != "long" ) ||
        $S_MIN_TOT -gt 20160 ]]; then
    echoerror "$S_RUN_TIME -> Runtime limit is too long. Please try again\n"
    display_help
  fi
  echoinfo "Run time limit set to $S_RUN_TIME"
else
  echoerror "$S_RUN_TIME -> Incorrect format. Please specify runtime limit in the format H:MM, HH:MM, or HHH:MM and try again\n"
  display_help
fi

# Helper function to convert time to seconds
convert_to_seconds() {
  local time=$1
  local seconds=0

  if [[ $time =~ ^([0-9]{1,3}):([0-5][0-9])$ ]]; then
    local hours=${BASH_REMATCH[1]}
    local minutes=${BASH_REMATCH[2]}

    seconds=$((hours * 3600 + minutes * 60))
  else
    echo "Invalid time format. Please use H:MM, HH:MM, or HHH:MM."
    exit 1
  fi

  echo "$seconds"
}

S_RUN_TIME_SEC=$(convert_to_seconds $S_RUN_TIME)

###############################################################################
# Start glances on the cluster                                                #
###############################################################################

cat <<EOF > $S_FILE_JOB
#!/usr/bin/env bash
sink_stdout="$GLANCES_WORKDIR/glances_$S_NODE.out"
sink_stderr="$GLANCES_WORKDIR/glances_$S_NODE.err"

{
  sleep $S_RUN_TIME_SEC
  echo "Time limit reached, killing glances" > \$sink_stdout
  kill \$\$
} &

export http_proxy=http://172.28.7.1:3128
export https_proxy=http://172.28.7.1:3128
export all_proxy=http://172.28.7.1:3128
export no_proxy=localhost,*.chimera.hpc.mssm.edu,172.28.0.0/16

S_IP_REMOTE="\$(hostname -i)"
echo "Remote IP:\$S_IP_REMOTE" >> $S_FILE_IP

# Lockfiles disabled for now
# lf=/tmp/glances-session/
# mkdir -p \$lf
# if ! find \$lf -type f ! -mtime +7 ! -iname "\$USER" -exec false {} + ; then
# 	owner=\$(stat -c "%U" \$lf)
# 	if [[ \$USER != \$owner ]]; then
#     echo "FAIL" > $S_FILE_IP
#     echo "HOSTNAME:\$HOSTNAME" >> $S_FILE_IP
#     echo "OWNER:\$owner" >> $S_FILE_IP
#     exit 1
#   fi
# else
#   touch \$lf/\$USER
# fi

local_used_ports=\$(netstat -4 -ltn | grep LISTEN | awk '{ print \$4 }' | awk -F":" '{ print \$2 }' )

for p in {61208..61308}; do
  if [[ \$local_used_ports != *\$p* ]]; then
    S_PORT_REMOTE=\$p
		break
	fi
done

echo "Remote Port:\$S_PORT_REMOTE" >> $S_FILE_IP

# Run glances for the specified amout of time
glances --port \$S_PORT_REMOTE -f "username:$S_USERNAME" \
  -w --disable-plugin sensors,smart,diskio > \$sink_stdout 2> \$sink_stderr
EOF


TRY=1
SUCCESS=0

while ( [ $TRY -lt 4 ] && [ $SUCCESS -eq 0 ] ); do
  # run the job on Minerva and save the ip of the compute node in the home directory of the user
  echo

  if [[ $S_NODE == "login" ]]; then
    echoinfo "Running glances on login node"
    bash -l $S_FILE_JOB &
  else
    echoinfo "Running glances on compute node $S_NODE"
    ssh $S_NODE \"bash -l $S_FILE_JOB\" &
  fi
  
  # wait until batch job has started, poll every second to check if IP file exists
  # once the file exists and is not empty the batch job has started
  echoinfo "Waiting for server to start\n"
  slept=0
  while ! [ -e $S_FILE_IP -a -s $S_FILE_IP ] && [ \$slept -lt 30 ]; do
    sleep 1
    slept=\$((slept+1))
  done
  sleep 4

  # get remote port from files stored on Minerva
  if ! test -e $S_FILE_IP; then
    echoerror "Could not find IP file on $S_HOSTNAME"
    exit 1
  elif ! grep -q FAIL $S_FILE_IP; then
    echoinfo "Receiving ip and port from the server"
    S_REMOTE_PORT=$(grep -m1 'Remote Port' $S_FILE_IP | cut -d ':' -f2)
    SUCCESS=1
  else
    hostname=$(grep -m1 'HOSTNAME' $S_FILE_IP | cut -d ':' -f2)
    owner=$(grep -m1 'OWNER' $S_FILE_IP | cut -d ':' -f2)
    if [ $TRY -eq 3 ]; then
      echoerror "$owner is running a session on $hostname, therefore execution is blocked..."
      echoerror "Please resubmit your job to get your job dispatched to another node. "
      echoerror "Change your arguments like -n -M -W slightly."
      exit 1
    else
      echoalert "Attempt $TRY failed due to $owner running a session on $hostname:"
      echoalert "Trying again"
      rm $S_FILE_IP
    fi
  fi
  TRY=$(($TRY+1))
done

# check if the port is defined
if  [[ "$S_REMOTE_PORT" == "" ]]; then
echoerror "remote port is not defined. Terminating script."
exit 1
fi

S_LOCAL_PORT=61208

if [[ $S_NODE == "login" ]]; then
  S_NODE_FWD="localhost"
else
  S_NODE_FWD=$S_NODE
fi

S_FWDCMD="ssh $S_HOSTNAME -L $S_LOCAL_PORT:$S_NODE_FWD:$S_REMOTE_PORT -fNT"

# print information about IP, ports and token
echoinfo "Server info:"
echo
echo -e "Remote hostname    : $S_NODE_FWD"
echo -e "Remote port        : $S_REMOTE_PORT"
echo

# write reconnect_info file
cat <<EOF > $S_FILE_RECONNECT
Restart file
Remote hostname   : $S_NODE_FWD
Remote port       : $S_REMOTE_PORT
EOF

exit 0